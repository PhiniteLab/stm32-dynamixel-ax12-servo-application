
DynamixelAX12Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e8  080046e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08004700  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004700  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a524  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac1  00000000  00000000  0002a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026578  00000000  00000000  0002d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009624  00000000  00000000  00053598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6e93  00000000  00000000  0005cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d8  00000000  00000000  00143aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080046a8 	.word	0x080046a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080046a8 	.word	0x080046a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b96e 	b.w	8000d78 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468c      	mov	ip, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8083 	bne.w	8000bca <__udivmoddi4+0x116>
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	4617      	mov	r7, r2
 8000ac8:	d947      	bls.n	8000b5a <__udivmoddi4+0xa6>
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	b142      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ad0:	f1c2 0020 	rsb	r0, r2, #32
 8000ad4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	4097      	lsls	r7, r2
 8000adc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aec:	fa1f fe87 	uxth.w	lr, r7
 8000af0:	fb08 c116 	mls	r1, r8, r6, ip
 8000af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af8:	fb06 f10e 	mul.w	r1, r6, lr
 8000afc:	4299      	cmp	r1, r3
 8000afe:	d909      	bls.n	8000b14 <__udivmoddi4+0x60>
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b06:	f080 8119 	bcs.w	8000d3c <__udivmoddi4+0x288>
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	f240 8116 	bls.w	8000d3c <__udivmoddi4+0x288>
 8000b10:	3e02      	subs	r6, #2
 8000b12:	443b      	add	r3, r7
 8000b14:	1a5b      	subs	r3, r3, r1
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	45a6      	cmp	lr, r4
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x8c>
 8000b2c:	193c      	adds	r4, r7, r4
 8000b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b32:	f080 8105 	bcs.w	8000d40 <__udivmoddi4+0x28c>
 8000b36:	45a6      	cmp	lr, r4
 8000b38:	f240 8102 	bls.w	8000d40 <__udivmoddi4+0x28c>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	443c      	add	r4, r7
 8000b40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b44:	eba4 040e 	sub.w	r4, r4, lr
 8000b48:	2600      	movs	r6, #0
 8000b4a:	b11d      	cbz	r5, 8000b54 <__udivmoddi4+0xa0>
 8000b4c:	40d4      	lsrs	r4, r2
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e9c5 4300 	strd	r4, r3, [r5]
 8000b54:	4631      	mov	r1, r6
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	b902      	cbnz	r2, 8000b5e <__udivmoddi4+0xaa>
 8000b5c:	deff      	udf	#255	; 0xff
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d150      	bne.n	8000c08 <__udivmoddi4+0x154>
 8000b66:	1bcb      	subs	r3, r1, r7
 8000b68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b6c:	fa1f f887 	uxth.w	r8, r7
 8000b70:	2601      	movs	r6, #1
 8000b72:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b76:	0c21      	lsrs	r1, r4, #16
 8000b78:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb08 f30c 	mul.w	r3, r8, ip
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0xe4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0xe2>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	f200 80e9 	bhi.w	8000d68 <__udivmoddi4+0x2b4>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1ac9      	subs	r1, r1, r3
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ba4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x10c>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x10a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80d9 	bhi.w	8000d70 <__udivmoddi4+0x2bc>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e7bf      	b.n	8000b4a <__udivmoddi4+0x96>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0x12e>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	f000 80b1 	beq.w	8000d36 <__udivmoddi4+0x282>
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	fab3 f683 	clz	r6, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d14a      	bne.n	8000c80 <__udivmoddi4+0x1cc>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0x140>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 80b8 	bhi.w	8000d64 <__udivmoddi4+0x2b0>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	468c      	mov	ip, r1
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0a8      	beq.n	8000b54 <__udivmoddi4+0xa0>
 8000c02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c06:	e7a5      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000c08:	f1c2 0320 	rsb	r3, r2, #32
 8000c0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c10:	4097      	lsls	r7, r2
 8000c12:	fa01 f002 	lsl.w	r0, r1, r2
 8000c16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	4330      	orrs	r0, r6
 8000c1e:	0c03      	lsrs	r3, r0, #16
 8000c20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f108 	mul.w	r1, r6, r8
 8000c34:	4299      	cmp	r1, r3
 8000c36:	fa04 f402 	lsl.w	r4, r4, r2
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x19c>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c42:	f080 808d 	bcs.w	8000d60 <__udivmoddi4+0x2ac>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 808a 	bls.w	8000d60 <__udivmoddi4+0x2ac>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	443b      	add	r3, r7
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b281      	uxth	r1, r0
 8000c54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb00 f308 	mul.w	r3, r0, r8
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x1c4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c6e:	d273      	bcs.n	8000d58 <__udivmoddi4+0x2a4>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d971      	bls.n	8000d58 <__udivmoddi4+0x2a4>
 8000c74:	3802      	subs	r0, #2
 8000c76:	4439      	add	r1, r7
 8000c78:	1acb      	subs	r3, r1, r3
 8000c7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c7e:	e778      	b.n	8000b72 <__udivmoddi4+0xbe>
 8000c80:	f1c6 0c20 	rsb	ip, r6, #32
 8000c84:	fa03 f406 	lsl.w	r4, r3, r6
 8000c88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c92:	fa01 f306 	lsl.w	r3, r1, r6
 8000c96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	0c3b      	lsrs	r3, r7, #16
 8000ca2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca6:	fa1f f884 	uxth.w	r8, r4
 8000caa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cb2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cb6:	458a      	cmp	sl, r1
 8000cb8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cbc:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x220>
 8000cc2:	1861      	adds	r1, r4, r1
 8000cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc8:	d248      	bcs.n	8000d5c <__udivmoddi4+0x2a8>
 8000cca:	458a      	cmp	sl, r1
 8000ccc:	d946      	bls.n	8000d5c <__udivmoddi4+0x2a8>
 8000cce:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd2:	4421      	add	r1, r4
 8000cd4:	eba1 010a 	sub.w	r1, r1, sl
 8000cd8:	b2bf      	uxth	r7, r7
 8000cda:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cde:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ce6:	fb00 f808 	mul.w	r8, r0, r8
 8000cea:	45b8      	cmp	r8, r7
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x24a>
 8000cee:	19e7      	adds	r7, r4, r7
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d22e      	bcs.n	8000d54 <__udivmoddi4+0x2a0>
 8000cf6:	45b8      	cmp	r8, r7
 8000cf8:	d92c      	bls.n	8000d54 <__udivmoddi4+0x2a0>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4427      	add	r7, r4
 8000cfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d02:	eba7 0708 	sub.w	r7, r7, r8
 8000d06:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0a:	454f      	cmp	r7, r9
 8000d0c:	46c6      	mov	lr, r8
 8000d0e:	4649      	mov	r1, r9
 8000d10:	d31a      	bcc.n	8000d48 <__udivmoddi4+0x294>
 8000d12:	d017      	beq.n	8000d44 <__udivmoddi4+0x290>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x27a>
 8000d16:	ebb3 020e 	subs.w	r2, r3, lr
 8000d1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d22:	40f2      	lsrs	r2, r6
 8000d24:	ea4c 0202 	orr.w	r2, ip, r2
 8000d28:	40f7      	lsrs	r7, r6
 8000d2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	462e      	mov	r6, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e70b      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000d3c:	4606      	mov	r6, r0
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0x60>
 8000d40:	4618      	mov	r0, r3
 8000d42:	e6fd      	b.n	8000b40 <__udivmoddi4+0x8c>
 8000d44:	4543      	cmp	r3, r8
 8000d46:	d2e5      	bcs.n	8000d14 <__udivmoddi4+0x260>
 8000d48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d50:	3801      	subs	r0, #1
 8000d52:	e7df      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d54:	4608      	mov	r0, r1
 8000d56:	e7d2      	b.n	8000cfe <__udivmoddi4+0x24a>
 8000d58:	4660      	mov	r0, ip
 8000d5a:	e78d      	b.n	8000c78 <__udivmoddi4+0x1c4>
 8000d5c:	4681      	mov	r9, r0
 8000d5e:	e7b9      	b.n	8000cd4 <__udivmoddi4+0x220>
 8000d60:	4666      	mov	r6, ip
 8000d62:	e775      	b.n	8000c50 <__udivmoddi4+0x19c>
 8000d64:	4630      	mov	r0, r6
 8000d66:	e74a      	b.n	8000bfe <__udivmoddi4+0x14a>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	4439      	add	r1, r7
 8000d6e:	e713      	b.n	8000b98 <__udivmoddi4+0xe4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443c      	add	r4, r7
 8000d74:	e724      	b.n	8000bc0 <__udivmoddi4+0x10c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <_ZN27dynamixel_ax_12A_parametersC1EP20__UART_HandleTypeDef>:
		RIGHT = 0x01,
		LEFT = 0x02

	}Turn_direction_st;

	dynamixel_ax_12A_parameters(UART_HandleTypeDef *__uartType) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]

		this->uartType = __uartType;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	601a      	str	r2, [r3, #0]
		this->calculated_checksum_u8 = 0;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	711a      	strb	r2, [r3, #4]

	}
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_ZN27dynamixel_ax_12A_parameters23set_operation_range_ccwEhf>:
		this->polling_msg(set_baudrate_msg, 8); // send msg and get response


	}

	void set_operation_range_ccw(uint8_t ID , float position_range){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	460b      	mov	r3, r1
 8000daa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dae:	72fb      	strb	r3, [r7, #11]

		uint16_t pos = this->calculate_pos(position_range); // position limit calculate
 8000db0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f8f3 	bl	8000fa0 <_ZN27dynamixel_ax_12A_parameters13calculate_posEf>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	83fb      	strh	r3, [r7, #30]

		// create array
		uint8_t set_ccw_position_limit[9];

		// assign syncron bytes
		set_ccw_position_limit[0] = HEADER_FIRST;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	753b      	strb	r3, [r7, #20]
		set_ccw_position_limit[1] = HEADER_SECOND;
 8000dc2:	23ff      	movs	r3, #255	; 0xff
 8000dc4:	757b      	strb	r3, [r7, #21]

		set_ccw_position_limit[2] = ID;    // Assign actuator id
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	75bb      	strb	r3, [r7, #22]
		set_ccw_position_limit[3] = 0x05;  // Assign packet length
 8000dca:	2305      	movs	r3, #5
 8000dcc:	75fb      	strb	r3, [r7, #23]

		set_ccw_position_limit[4] = WRITE_DATA; // Assign instruction
 8000dce:	2303      	movs	r3, #3
 8000dd0:	763b      	strb	r3, [r7, #24]
		set_ccw_position_limit[5] = CCW_ANGLE_LIMIT_L_ADR; // Assign limit ccw position first adr
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	767b      	strb	r3, [r7, #25]

		set_ccw_position_limit[6] = pos;		// Assign parameter position limit
 8000dd6:	8bfb      	ldrh	r3, [r7, #30]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	76bb      	strb	r3, [r7, #26]
		set_ccw_position_limit[7] = pos >> 8;	// Assign parameter position limit
 8000ddc:	8bfb      	ldrh	r3, [r7, #30]
 8000dde:	121b      	asrs	r3, r3, #8
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	76fb      	strb	r3, [r7, #27]

		this->calculate_checksum(set_ccw_position_limit, 8); // calculate checksum
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2208      	movs	r2, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f92b 	bl	8001048 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh>

		set_ccw_position_limit[8] = this->calculated_checksum_u8; // assign checksum
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	773b      	strb	r3, [r7, #28]

		this->polling_msg(set_ccw_position_limit, 9); // send msg and get response
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	4619      	mov	r1, r3
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f000 f8ad 	bl	8000f60 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht>



	}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZN27dynamixel_ax_12A_parameters22set_operation_range_cwEhf>:

	void set_operation_range_cw(uint8_t ID , float position_range){
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b088      	sub	sp, #32
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	460b      	mov	r3, r1
 8000e18:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e1c:	72fb      	strb	r3, [r7, #11]

		uint16_t pos = this->calculate_pos(position_range); // position limit calculate
 8000e1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 f8bc 	bl	8000fa0 <_ZN27dynamixel_ax_12A_parameters13calculate_posEf>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	83fb      	strh	r3, [r7, #30]

		// create array
		uint8_t set_cw_position_limit[9];

		// assign syncron bytes
		set_cw_position_limit[0] = HEADER_FIRST;
 8000e2c:	23ff      	movs	r3, #255	; 0xff
 8000e2e:	753b      	strb	r3, [r7, #20]
		set_cw_position_limit[1] = HEADER_SECOND;
 8000e30:	23ff      	movs	r3, #255	; 0xff
 8000e32:	757b      	strb	r3, [r7, #21]

		set_cw_position_limit[2] = ID;    // Assign actuator id
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	75bb      	strb	r3, [r7, #22]
		set_cw_position_limit[3] = 0x05;  // Assign packet length
 8000e38:	2305      	movs	r3, #5
 8000e3a:	75fb      	strb	r3, [r7, #23]

		set_cw_position_limit[4] = WRITE_DATA; // Assign instruction
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	763b      	strb	r3, [r7, #24]
		set_cw_position_limit[5] = CW_ANGLE_LIMIT_L_ADR; // Assign limit ccw position first adr
 8000e40:	2306      	movs	r3, #6
 8000e42:	767b      	strb	r3, [r7, #25]

		set_cw_position_limit[6] = pos;		// Assign parameter position limit
 8000e44:	8bfb      	ldrh	r3, [r7, #30]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	76bb      	strb	r3, [r7, #26]
		set_cw_position_limit[7] = pos >> 8;	// Assign parameter position limit
 8000e4a:	8bfb      	ldrh	r3, [r7, #30]
 8000e4c:	121b      	asrs	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	76fb      	strb	r3, [r7, #27]

		this->calculate_checksum(set_cw_position_limit, 8); // calculate checksum
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2208      	movs	r2, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f8f4 	bl	8001048 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh>

		set_cw_position_limit[8] = this->calculated_checksum_u8; // assign checksum
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	773b      	strb	r3, [r7, #28]

		this->polling_msg(set_cw_position_limit, 9); // send msg and get response
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f876 	bl	8000f60 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht>


	}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZN27dynamixel_ax_12A_parameters26set_position_and_velcoctiyEhff>:


	}


	void set_position_and_velcoctiy(uint8_t ID, float position_deg,
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e8a:	edc7 0a00 	vstr	s1, [r7]
 8000e8e:	72fb      	strb	r3, [r7, #11]
			float velocity_deg_per_s) {

		uint16_t pos = this->calculate_pos(position_deg); // goal position calculate
 8000e90:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 f883 	bl	8000fa0 <_ZN27dynamixel_ax_12A_parameters13calculate_posEf>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	83fb      	strh	r3, [r7, #30]
		uint16_t velocity = this->calculate_vel(velocity_deg_per_s); // goal position calculate
 8000e9e:	ed97 0a00 	vldr	s0, [r7]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f000 f89c 	bl	8000fe0 <_ZN27dynamixel_ax_12A_parameters13calculate_velEf>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	83bb      	strh	r3, [r7, #28]

		// create array
		uint8_t set_pos_vel_u8[11];

		// assign syncron bytes
		set_pos_vel_u8[0] = HEADER_FIRST;
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	743b      	strb	r3, [r7, #16]
		set_pos_vel_u8[1] = HEADER_SECOND;
 8000eb0:	23ff      	movs	r3, #255	; 0xff
 8000eb2:	747b      	strb	r3, [r7, #17]

		set_pos_vel_u8[2] = ID;   // Assign acuator id
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	74bb      	strb	r3, [r7, #18]
		set_pos_vel_u8[3] = 0x07; // Assign packet length
 8000eb8:	2307      	movs	r3, #7
 8000eba:	74fb      	strb	r3, [r7, #19]

		set_pos_vel_u8[4] = WRITE_DATA; // Assign instruction
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	753b      	strb	r3, [r7, #20]
		set_pos_vel_u8[5] = GOAL_POSITION_L_ADR; // Assign position first addr
 8000ec0:	231e      	movs	r3, #30
 8000ec2:	757b      	strb	r3, [r7, #21]

		set_pos_vel_u8[6] = pos;	  // Assign parameter : position
 8000ec4:	8bfb      	ldrh	r3, [r7, #30]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	75bb      	strb	r3, [r7, #22]
		set_pos_vel_u8[7] = pos >> 8; // Assign parameter : position
 8000eca:	8bfb      	ldrh	r3, [r7, #30]
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	75fb      	strb	r3, [r7, #23]

		set_pos_vel_u8[8] = velocity; // Assign parameter : velocity
 8000ed2:	8bbb      	ldrh	r3, [r7, #28]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	763b      	strb	r3, [r7, #24]
		set_pos_vel_u8[9] = velocity >> 8; // Assign parameter : velocity
 8000ed8:	8bbb      	ldrh	r3, [r7, #28]
 8000eda:	121b      	asrs	r3, r3, #8
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	767b      	strb	r3, [r7, #25]

		this->calculate_checksum(set_pos_vel_u8, 10); // calculate checksum
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 f8ad 	bl	8001048 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh>

		set_pos_vel_u8[10] = this->calculated_checksum_u8; // assign checksum
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	76bb      	strb	r3, [r7, #26]

		this->polling_msg(set_pos_vel_u8, 11); // send msg and get response
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	220b      	movs	r2, #11
 8000efa:	4619      	mov	r1, r3
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 f82f 	bl	8000f60 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht>


	}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZN27dynamixel_ax_12A_parameters7set_ledEhh>:
		this->polling_msg(set_max_torque_u8, 9); // send msg and get response


	}

	void set_led(uint8_t ID, uint8_t led_status) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70fb      	strb	r3, [r7, #3]
 8000f16:	4613      	mov	r3, r2
 8000f18:	70bb      	strb	r3, [r7, #2]

		// create array
		uint8_t set_led_array[8];

		// assign syncron bytes
		set_led_array[0] = HEADER_FIRST;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	723b      	strb	r3, [r7, #8]
		set_led_array[1] = HEADER_SECOND;
 8000f1e:	23ff      	movs	r3, #255	; 0xff
 8000f20:	727b      	strb	r3, [r7, #9]

		set_led_array[2] = ID;   // Assign acuator id
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	72bb      	strb	r3, [r7, #10]
		set_led_array[3] = 0x04; // Assign packet length
 8000f26:	2304      	movs	r3, #4
 8000f28:	72fb      	strb	r3, [r7, #11]

		set_led_array[4] = WRITE_DATA;  // Assign instruction
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	733b      	strb	r3, [r7, #12]
		set_led_array[5] = LED_ADR; 	// Assign led addr
 8000f2e:	2319      	movs	r3, #25
 8000f30:	737b      	strb	r3, [r7, #13]

		set_led_array[6] = led_status;	  // Assign parameter : position
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	73bb      	strb	r3, [r7, #14]

		this->calculate_checksum(set_led_array, 7); // calculate checksum
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f882 	bl	8001048 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh>

		set_led_array[7] = this->calculated_checksum_u8; // assign checksum
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	791b      	ldrb	r3, [r3, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]

		this->polling_msg(set_led_array, 8); // send msg and get response
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2208      	movs	r2, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f804 	bl	8000f60 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht>



	}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht>:


	////////////////////////////////////////////////////////
	// Other collaborator function

	void polling_msg(uint8_t *tx_buffer_ptr, uint16_t transmit_size_u16) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	80fb      	strh	r3, [r7, #6]

		HAL_UART_Transmit_IT(this->uartType, tx_buffer_ptr, transmit_size_u16);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fc7a 	bl	8003870 <HAL_UART_Transmit_IT>

		while (this->uartType->gState != HAL_UART_STATE_READY)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d000      	beq.n	8000f92 <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht+0x32>
 8000f90:	e7f4      	b.n	8000f7c <_ZN27dynamixel_ax_12A_parameters11polling_msgEPht+0x1c>
			;

	}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	0000      	movs	r0, r0
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <_ZN27dynamixel_ax_12A_parameters13calculate_posEf>:
	uint8_t baudrate_to_value(uint32_t baudrate_in_BPS) {

		return ((uint8_t) ((2000000 / baudrate_in_BPS) - 1));
	}

	uint16_t calculate_pos(float position_in_degree) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]


		// per unit degree 0.293255
		return ((uint16_t)(position_in_degree/0.293255));
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f7ff fa8f 	bl	80004d0 <__aeabi_f2d>
 8000fb2:	a309      	add	r3, pc, #36	; (adr r3, 8000fd8 <_ZN27dynamixel_ax_12A_parameters13calculate_posEf+0x38>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fc0c 	bl	80007d4 <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fcee 	bl	80009a4 <__aeabi_d2uiz>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29b      	uxth	r3, r3

	}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	9e98dcdb 	.word	0x9e98dcdb
 8000fdc:	3fd2c4b0 	.word	0x3fd2c4b0

08000fe0 <_ZN27dynamixel_ax_12A_parameters13calculate_velEf>:

	uint16_t calculate_vel(float velocity_deg_per_s) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	ed87 0a00 	vstr	s0, [r7]

		float rpm = 0.16667 * velocity_deg_per_s;
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff fa6f 	bl	80004d0 <__aeabi_f2d>
 8000ff2:	a311      	add	r3, pc, #68	; (adr r3, 8001038 <_ZN27dynamixel_ax_12A_parameters13calculate_velEf+0x58>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fac2 	bl	8000580 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fcee 	bl	80009e4 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]

		return (uint16_t(rpm/0.111));
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fa5f 	bl	80004d0 <__aeabi_f2d>
 8001012:	a30b      	add	r3, pc, #44	; (adr r3, 8001040 <_ZN27dynamixel_ax_12A_parameters13calculate_velEf+0x60>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fbdc 	bl	80007d4 <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fcbe 	bl	80009a4 <__aeabi_d2uiz>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3

	}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	f3af 8000 	nop.w
 8001038:	4b9cb685 	.word	0x4b9cb685
 800103c:	3fc55571 	.word	0x3fc55571
 8001040:	f9db22d1 	.word	0xf9db22d1
 8001044:	3fbc6a7e 	.word	0x3fbc6a7e

08001048 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh>:

		return (uint16_t(velocity_percent/0.1));

	}

	void calculate_checksum(uint8_t *data_array, uint8_t size) {
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	71fb      	strb	r3, [r7, #7]

		this->calculated_checksum_u8 = 0;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	711a      	strb	r2, [r3, #4]

		for (int i = 2; i < size; i++) {
 800105c:	2302      	movs	r3, #2
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	da0d      	bge.n	8001084 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh+0x3c>

			this->calculated_checksum_u8 += data_array[i];
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	791a      	ldrb	r2, [r3, #4]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	440b      	add	r3, r1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4413      	add	r3, r2
 8001076:	b2da      	uxtb	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	711a      	strb	r2, [r3, #4]
		for (int i = 2; i < size; i++) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e7ed      	b.n	8001060 <_ZN27dynamixel_ax_12A_parameters18calculate_checksumEPhh+0x18>

		}

		this->calculated_checksum_u8 = (~(this->calculated_checksum_u8)) & 0xFF;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	43db      	mvns	r3, r3
 800108a:	b2da      	uxtb	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	711a      	strb	r2, [r3, #4]

	}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <main>:
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);

float i = 0.0;

int main(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

	HAL_Init();
 80010a0:	f000 fc14 	bl	80018cc <HAL_Init>

	SystemClock_Config();
 80010a4:	f000 f848 	bl	8001138 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 80010a8:	f000 f972 	bl	8001390 <_ZL12MX_GPIO_Initv>
	MX_USART3_UART_Init();
 80010ac:	f000 f916 	bl	80012dc <_ZL19MX_USART3_UART_Initv>
	MX_DMA_Init();
 80010b0:	f000 f948 	bl	8001344 <_ZL11MX_DMA_Initv>
	MX_UART4_Init();
 80010b4:	f000 f8dc 	bl	8001270 <_ZL13MX_UART4_Initv>



	servo_motor_ct.set_operation_range_ccw(0x03, 300);
 80010b8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001124 <main+0x88>
 80010bc:	2103      	movs	r1, #3
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <main+0x8c>)
 80010c0:	f7ff fe6e 	bl	8000da0 <_ZN27dynamixel_ax_12A_parameters23set_operation_range_ccwEhf>
	HAL_Delay(10);
 80010c4:	200a      	movs	r0, #10
 80010c6:	f000 fc67 	bl	8001998 <HAL_Delay>
	servo_motor_ct.set_operation_range_cw(0x03, 0);
 80010ca:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800112c <main+0x90>
 80010ce:	2103      	movs	r1, #3
 80010d0:	4815      	ldr	r0, [pc, #84]	; (8001128 <main+0x8c>)
 80010d2:	f7ff fe9c 	bl	8000e0e <_ZN27dynamixel_ax_12A_parameters22set_operation_range_cwEhf>
	HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fc5e 	bl	8001998 <HAL_Delay>



	while (1) {

		servo_motor_ct.set_led(0x03, 0x01);
 80010dc:	2201      	movs	r2, #1
 80010de:	2103      	movs	r1, #3
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0x8c>)
 80010e2:	f7ff ff12 	bl	8000f0a <_ZN27dynamixel_ax_12A_parameters7set_ledEhh>
		servo_motor_ct.set_position_and_velcoctiy(0x03, 150, 270);
 80010e6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001130 <main+0x94>
 80010ea:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001134 <main+0x98>
 80010ee:	2103      	movs	r1, #3
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <main+0x8c>)
 80010f2:	f7ff fec3 	bl	8000e7c <_ZN27dynamixel_ax_12A_parameters26set_position_and_velcoctiyEhff>
		HAL_Delay(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fa:	f000 fc4d 	bl	8001998 <HAL_Delay>
		servo_motor_ct.set_led(0x03, 0x00);
 80010fe:	2200      	movs	r2, #0
 8001100:	2103      	movs	r1, #3
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <main+0x8c>)
 8001104:	f7ff ff01 	bl	8000f0a <_ZN27dynamixel_ax_12A_parameters7set_ledEhh>
		servo_motor_ct.set_position_and_velcoctiy(0x03, 0, 270);
 8001108:	eddf 0a09 	vldr	s1, [pc, #36]	; 8001130 <main+0x94>
 800110c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800112c <main+0x90>
 8001110:	2103      	movs	r1, #3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <main+0x8c>)
 8001114:	f7ff feb2 	bl	8000e7c <_ZN27dynamixel_ax_12A_parameters26set_position_and_velcoctiyEhff>
		HAL_Delay(1000);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f000 fc3c 	bl	8001998 <HAL_Delay>
		servo_motor_ct.set_led(0x03, 0x01);
 8001120:	e7dc      	b.n	80010dc <main+0x40>
 8001122:	bf00      	nop
 8001124:	43960000 	.word	0x43960000
 8001128:	200001f0 	.word	0x200001f0
 800112c:	00000000 	.word	0x00000000
 8001130:	43870000 	.word	0x43870000
 8001134:	43160000 	.word	0x43160000

08001138 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b4      	sub	sp, #208	; 0xd0
 800113c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800113e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 faa6 	bl	8004698 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800114c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2284      	movs	r2, #132	; 0x84
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fa97 	bl	8004698 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800116a:	f001 fa8d 	bl	8002688 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <_Z18SystemClock_Configv+0x130>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <_Z18SystemClock_Configv+0x130>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <_Z18SystemClock_Configv+0x130>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <_Z18SystemClock_Configv+0x134>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800118e:	4a37      	ldr	r2, [pc, #220]	; (800126c <_Z18SystemClock_Configv+0x134>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <_Z18SystemClock_Configv+0x134>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 80011c4:	2348      	movs	r3, #72	; 0x48
 80011c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fa64 	bl	80026a8 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 80011f0:	f000 f986 	bl	8001500 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001214:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fce8 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_Z18SystemClock_Configv+0xfc>
		Error_Handler();
 8001230:	f000 f966 	bl	8001500 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8001234:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001238:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART4;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800123a:	2300      	movs	r3, #0
 800123c:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800123e:	2300      	movs	r3, #0
 8001240:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fed4 	bl	8002ff4 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <_Z18SystemClock_Configv+0x128>
		Error_Handler();
 800125c:	f000 f950 	bl	8001500 <Error_Handler>
	}
}
 8001260:	bf00      	nop
 8001262:	37d0      	adds	r7, #208	; 0xd0
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <_ZL13MX_UART4_Initv>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <_ZL13MX_UART4_Initv+0x64>)
 8001278:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 1000000;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <_ZL13MX_UART4_Initv+0x68>)
 800127e:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 8001294:	220c      	movs	r2, #12
 8001296:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <_ZL13MX_UART4_Initv+0x60>)
 80012b2:	f002 fa8f 	bl	80037d4 <HAL_UART_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZL13MX_UART4_Initv+0x5a>
		Error_Handler();
 80012c6:	f000 f91b 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000028 	.word	0x20000028
 80012d4:	40004c00 	.word	0x40004c00
 80012d8:	000f4240 	.word	0x000f4240

080012dc <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <_ZL19MX_USART3_UART_Initv+0x64>)
 80012e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001320:	f002 fa58 	bl	80037d4 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZL19MX_USART3_UART_Initv+0x5c>
		Error_Handler();
 8001334:	f000 f8e4 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000ac 	.word	0x200000ac
 8001340:	40004800 	.word	0x40004800

08001344 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_ZL11MX_DMA_Initv+0x48>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <_ZL11MX_DMA_Initv+0x48>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <_ZL11MX_DMA_Initv+0x48>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200d      	movs	r0, #13
 8001368:	f000 fc15 	bl	8001b96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream2_IRQn);
 800136c:	200d      	movs	r0, #13
 800136e:	f000 fc2e 	bl	8001bce <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	200f      	movs	r0, #15
 8001378:	f000 fc0d 	bl	8001b96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream4_IRQn);
 800137c:	200f      	movs	r0, #15
 800137e:	f000 fc26 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a43      	ldr	r2, [pc, #268]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 8001424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <_ZL12MX_GPIO_Initv+0x158>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIRECTION_PIN_GPIO_Port, DIRECTION_PIN_Pin,
 8001436:	2200      	movs	r2, #0
 8001438:	2102      	movs	r1, #2
 800143a:	482c      	ldr	r0, [pc, #176]	; (80014ec <_ZL12MX_GPIO_Initv+0x15c>)
 800143c:	f001 f90a 	bl	8002654 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f244 0181 	movw	r1, #16513	; 0x4081
 8001446:	482a      	ldr	r0, [pc, #168]	; (80014f0 <_ZL12MX_GPIO_Initv+0x160>)
 8001448:	f001 f904 	bl	8002654 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800144c:	2200      	movs	r2, #0
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	4828      	ldr	r0, [pc, #160]	; (80014f4 <_ZL12MX_GPIO_Initv+0x164>)
 8001452:	f001 f8ff 	bl	8002654 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <_ZL12MX_GPIO_Initv+0x168>)
 800145e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4824      	ldr	r0, [pc, #144]	; (80014fc <_ZL12MX_GPIO_Initv+0x16c>)
 800146c:	f000 ff46 	bl	80022fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DIRECTION_PIN_Pin */
	GPIO_InitStruct.Pin = DIRECTION_PIN_Pin;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(DIRECTION_PIN_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4819      	ldr	r0, [pc, #100]	; (80014ec <_ZL12MX_GPIO_Initv+0x15c>)
 8001488:	f000 ff38 	bl	80022fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800148c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001490:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <_ZL12MX_GPIO_Initv+0x160>)
 80014a6:	f000 ff29 	bl	80022fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <_ZL12MX_GPIO_Initv+0x164>)
 80014c2:	f000 ff1b 	bl	80022fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <_ZL12MX_GPIO_Initv+0x164>)
 80014da:	f000 ff0f 	bl	80022fc <HAL_GPIO_Init>

}
 80014de:	bf00      	nop
 80014e0:	3730      	adds	r7, #48	; 0x30
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	4293      	cmp	r3, r2
 8001524:	d103      	bne.n	800152e <_Z41__static_initialization_and_destruction_0ii+0x22>
dynamixel_ax_12A_parameters servo_motor_ct(&huart4);
 8001526:	4904      	ldr	r1, [pc, #16]	; (8001538 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800152a:	f7ff fc27 	bl	8000d7c <_ZN27dynamixel_ax_12A_parametersC1EP20__UART_HandleTypeDef>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000028 	.word	0x20000028
 800153c:	200001f0 	.word	0x200001f0

08001540 <_GLOBAL__sub_I_huart4>:
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
 8001544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff ffdf 	bl	800150c <_Z41__static_initialization_and_destruction_0ii>
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x44>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x44>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x44>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x44>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x44>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x44>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_UART_MspInit+0x1f0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	f040 80ac 	bne.w	8001714 <HAL_UART_MspInit+0x17c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015bc:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a66      	ldr	r2, [pc, #408]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_UART_MspInit+0x1f4>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001614:	2308      	movs	r3, #8
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	485c      	ldr	r0, [pc, #368]	; (8001790 <HAL_UART_MspInit+0x1f8>)
 8001620:	f000 fe6c 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001636:	2308      	movs	r3, #8
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4854      	ldr	r0, [pc, #336]	; (8001794 <HAL_UART_MspInit+0x1fc>)
 8001642:	f000 fe5b 	bl	80022fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001646:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_UART_MspInit+0x204>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_UART_MspInit+0x200>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001652:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_UART_MspInit+0x200>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001666:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_UART_MspInit+0x200>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_UART_MspInit+0x200>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_UART_MspInit+0x200>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001688:	4843      	ldr	r0, [pc, #268]	; (8001798 <HAL_UART_MspInit+0x200>)
 800168a:	f000 fabb 	bl	8001c04 <HAL_DMA_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001694:	f7ff ff34 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_UART_MspInit+0x200>)
 800169c:	671a      	str	r2, [r3, #112]	; 0x70
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_UART_MspInit+0x200>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80016a4:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016a6:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <HAL_UART_MspInit+0x20c>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016e8:	f000 fa8c 	bl	8001c04 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80016f2:	f7ff ff05 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_UART_MspInit+0x208>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2034      	movs	r0, #52	; 0x34
 8001708:	f000 fa45 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800170c:	2034      	movs	r0, #52	; 0x34
 800170e:	f000 fa5e 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001712:	e035      	b.n	8001780 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_UART_MspInit+0x210>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d130      	bne.n	8001780 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_UART_MspInit+0x1f4>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_UART_MspInit+0x1f4>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_UART_MspInit+0x1f4>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0x1f4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_UART_MspInit+0x1f4>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_UART_MspInit+0x1f4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800174e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001760:	2307      	movs	r3, #7
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <HAL_UART_MspInit+0x214>)
 800176c:	f000 fdc6 	bl	80022fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2027      	movs	r0, #39	; 0x27
 8001776:	f000 fa0e 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800177a:	2027      	movs	r0, #39	; 0x27
 800177c:	f000 fa27 	bl	8001bce <HAL_NVIC_EnableIRQ>
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004c00 	.word	0x40004c00
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020800 	.word	0x40020800
 8001798:	20000130 	.word	0x20000130
 800179c:	40026040 	.word	0x40026040
 80017a0:	20000190 	.word	0x20000190
 80017a4:	40026070 	.word	0x40026070
 80017a8:	40004800 	.word	0x40004800
 80017ac:	40020c00 	.word	0x40020c00

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 f8ac 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Stream2_IRQHandler+0x10>)
 800180a:	f000 fb3b 	bl	8001e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000130 	.word	0x20000130

08001818 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream4_IRQHandler+0x10>)
 800181e:	f000 fb31 	bl	8001e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000190 	.word	0x20000190

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <USART3_IRQHandler+0x10>)
 8001832:	f002 f879 	bl	8003928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000ac 	.word	0x200000ac

08001840 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <UART4_IRQHandler+0x10>)
 8001846:	f002 f86f 	bl	8003928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000028 	.word	0x20000028

08001854 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a2:	f7ff ffd7 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f002 fed3 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7ff fbf7 	bl	800109c <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018bc:	080046f4 	.word	0x080046f4
  ldr r2, =_sbss
 80018c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018c4:	200001fc 	.word	0x200001fc

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018da:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f94f 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fe32 	bl	8001550 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f967 	bl	8001bea <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f92f 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	200001f8 	.word	0x200001f8

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200001f8 	.word	0x200001f8

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	05fa0000 	.word	0x05fa0000

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff feb6 	bl	8001980 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e099      	b.n	8001d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	e00f      	b.n	8001c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c42:	f7ff fe9d 	bl	8001980 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d908      	bls.n	8001c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e078      	b.n	8001d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e8      	bne.n	8001c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_DMA_Init+0x158>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d117      	bne.n	8001d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fa7b 	bl	8002204 <DMA_CheckFifoParam>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d22:	2301      	movs	r3, #1
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa32 	bl	8002198 <DMA_CalcBaseAndBitshift>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	f010803f 	.word	0xf010803f

08001d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff fe07 	bl	8001980 <HAL_GetTick>
 8001d72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e052      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_Abort+0x62>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	e013      	b.n	8001e0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de4:	f7ff fdcc 	bl	8001980 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d90c      	bls.n	8001e0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e015      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e4      	bne.n	8001de4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00c      	b.n	8001e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e90:	4b92      	ldr	r3, [pc, #584]	; (80020dc <HAL_DMA_IRQHandler+0x258>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a92      	ldr	r2, [pc, #584]	; (80020e0 <HAL_DMA_IRQHandler+0x25c>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2208      	movs	r2, #8
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2208      	movs	r2, #8
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0202 	orr.w	r2, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2204      	movs	r2, #4
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2210      	movs	r2, #16
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d043      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d03c      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2210      	movs	r2, #16
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d018      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d024      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
 8001fb2:	e01f      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e016      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0208 	bic.w	r2, r2, #8
 8001fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 808e 	beq.w	8002122 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8086 	beq.w	8002122 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2220      	movs	r2, #32
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b05      	cmp	r3, #5
 800202c:	d136      	bne.n	800209c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0216 	bic.w	r2, r2, #22
 800203c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_DMA_IRQHandler+0x1da>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0208 	bic.w	r2, r2, #8
 800206c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	223f      	movs	r2, #63	; 0x3f
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208e:	2b00      	cmp	r3, #0
 8002090:	d07d      	beq.n	800218e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
        }
        return;
 800209a:	e078      	b.n	800218e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d030      	beq.n	8002122 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
 80020c8:	e02b      	b.n	8002122 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d027      	beq.n	8002122 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e022      	b.n	8002122 <HAL_DMA_IRQHandler+0x29e>
 80020dc:	20000000 	.word	0x20000000
 80020e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0210 	bic.w	r2, r2, #16
 8002100:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	2b00      	cmp	r3, #0
 8002128:	d032      	beq.n	8002190 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d022      	beq.n	800217c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	429a      	cmp	r2, r3
 8002158:	d307      	bcc.n	800216a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f2      	bne.n	800214e <HAL_DMA_IRQHandler+0x2ca>
 8002168:	e000      	b.n	800216c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800216a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e000      	b.n	8002190 <HAL_DMA_IRQHandler+0x30c>
        return;
 800218e:	bf00      	nop
    }
  }
}
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3b10      	subs	r3, #16
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <DMA_CalcBaseAndBitshift+0x60>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <DMA_CalcBaseAndBitshift+0x64>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d908      	bls.n	80021d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <DMA_CalcBaseAndBitshift+0x68>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	1d1a      	adds	r2, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
 80021d6:	e006      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <DMA_CalcBaseAndBitshift+0x68>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	080046d8 	.word	0x080046d8
 8002200:	fffffc00 	.word	0xfffffc00

08002204 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11f      	bne.n	800225e <DMA_CheckFifoParam+0x5a>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d856      	bhi.n	80022d2 <DMA_CheckFifoParam+0xce>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <DMA_CheckFifoParam+0x28>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	0800223d 	.word	0x0800223d
 8002230:	0800224f 	.word	0x0800224f
 8002234:	0800223d 	.word	0x0800223d
 8002238:	080022d3 	.word	0x080022d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d046      	beq.n	80022d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e043      	b.n	80022d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002256:	d140      	bne.n	80022da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225c:	e03d      	b.n	80022da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002266:	d121      	bne.n	80022ac <DMA_CheckFifoParam+0xa8>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d837      	bhi.n	80022de <DMA_CheckFifoParam+0xda>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <DMA_CheckFifoParam+0x70>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002285 	.word	0x08002285
 8002278:	0800228b 	.word	0x0800228b
 800227c:	08002285 	.word	0x08002285
 8002280:	0800229d 	.word	0x0800229d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e030      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d025      	beq.n	80022e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800229a:	e022      	b.n	80022e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022a4:	d11f      	bne.n	80022e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022aa:	e01c      	b.n	80022e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d903      	bls.n	80022ba <DMA_CheckFifoParam+0xb6>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d003      	beq.n	80022c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b8:	e018      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      break;
 80022be:	e015      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      break;
 80022d0:	e00b      	b.n	80022ea <DMA_CheckFifoParam+0xe6>
      break;
 80022d2:	bf00      	nop
 80022d4:	e00a      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e008      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e006      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e004      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
 80022e4:	e002      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;   
 80022e6:	bf00      	nop
 80022e8:	e000      	b.n	80022ec <DMA_CheckFifoParam+0xe8>
      break;
 80022ea:	bf00      	nop
    }
  } 
  
  return status; 
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e175      	b.n	8002608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8164 	bne.w	8002602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d00b      	beq.n	800235a <HAL_GPIO_Init+0x5e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234e:	2b11      	cmp	r3, #17
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b12      	cmp	r3, #18
 8002358:	d130      	bne.n	80023bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x100>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80be 	beq.w	8002602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_GPIO_Init+0x324>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_GPIO_Init+0x324>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_GPIO_Init+0x324>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800249e:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_GPIO_Init+0x328>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_GPIO_Init+0x32c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d037      	beq.n	800253a <HAL_GPIO_Init+0x23e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_GPIO_Init+0x330>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_GPIO_Init+0x23a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x334>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x236>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_GPIO_Init+0x338>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x232>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_GPIO_Init+0x33c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x22e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_GPIO_Init+0x340>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x22a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_GPIO_Init+0x344>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x226>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_GPIO_Init+0x348>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x222>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_GPIO_Init+0x34c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x21e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4f      	ldr	r2, [pc, #316]	; (800264c <HAL_GPIO_Init+0x350>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x21a>
 8002512:	2309      	movs	r3, #9
 8002514:	e012      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002516:	230a      	movs	r3, #10
 8002518:	e010      	b.n	800253c <HAL_GPIO_Init+0x240>
 800251a:	2308      	movs	r3, #8
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x240>
 800251e:	2307      	movs	r3, #7
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x240>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x240>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x240>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x328>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_GPIO_Init+0x354>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257e:	4a34      	ldr	r2, [pc, #208]	; (8002650 <HAL_GPIO_Init+0x354>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_GPIO_Init+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae86 	bls.w	800231c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40022000 	.word	0x40022000
 800264c:	40022400 	.word	0x40022400
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e291      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8087 	beq.w	80027da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026cc:	4b96      	ldr	r3, [pc, #600]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d00c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d8:	4b93      	ldr	r3, [pc, #588]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d112      	bne.n	800270a <HAL_RCC_OscConfig+0x62>
 80026e4:	4b90      	ldr	r3, [pc, #576]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f0:	d10b      	bne.n	800270a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f2:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d06c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x130>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d168      	bne.n	80027d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e26b      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x7a>
 8002714:	4b84      	ldr	r3, [pc, #528]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a83      	ldr	r2, [pc, #524]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e02e      	b.n	8002780 <HAL_RCC_OscConfig+0xd8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x9c>
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7e      	ldr	r2, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7b      	ldr	r2, [pc, #492]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800273c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e01d      	b.n	8002780 <HAL_RCC_OscConfig+0xd8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0xc0>
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a72      	ldr	r2, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xd8>
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f8fa 	bl	8001980 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f8f6 	bl	8001980 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e21f      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0xe8>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff f8e6 	bl	8001980 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff f8e2 	bl	8001980 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e20b      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x110>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d069      	beq.n	80028ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e6:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d11c      	bne.n	8002838 <HAL_RCC_OscConfig+0x190>
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x17a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1df      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	493d      	ldr	r1, [pc, #244]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	e040      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff f898 	bl	8001980 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002854:	f7ff f894 	bl	8001980 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1bd      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4929      	ldr	r1, [pc, #164]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
 8002886:	e018      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff f874 	bl	8001980 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff f870 	bl	8001980 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e199      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d038      	beq.n	8002938 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7ff f851 	bl	8001980 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff f84d 	bl	8001980 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e176      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x23a>
 8002900:	e01a      	b.n	8002938 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x280>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7ff f837 	bl	8001980 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002916:	f7ff f833 	bl	8001980 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d903      	bls.n	800292c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e15c      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
 8002928:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a4 	beq.w	8002a8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296e:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_OscConfig+0x4d0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fe fffb 	bl	8001980 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe fff7 	bl	8001980 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	; 0x64
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e120      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x31a>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	e02d      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x33c>
 80029ca:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a69      	ldr	r2, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a66      	ldr	r2, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
 80029e2:	e01c      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCC_OscConfig+0x35e>
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a60      	ldr	r2, [pc, #384]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
 8002a04:	e00b      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a5a      	ldr	r2, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4a57      	ldr	r2, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d015      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe ffab 	bl	8001980 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe ffa7 	bl	8001980 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0ce      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ee      	beq.n	8002a2e <HAL_RCC_OscConfig+0x386>
 8002a50:	e014      	b.n	8002a7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe ff95 	bl	8001980 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe ff91 	bl	8001980 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a3b      	ldr	r2, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a4 	beq.w	8002be0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d06b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d149      	bne.n	8002b40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe ff62 	bl	8001980 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe ff5e 	bl	8001980 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e087      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	4313      	orrs	r3, r2
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe ff32 	bl	8001980 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe ff2e 	bl	8001980 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e057      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x478>
 8002b3e:	e04f      	b.n	8002be0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe ff18 	bl	8001980 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe ff14 	bl	8001980 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e03d      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4ac>
 8002b72:	e035      	b.n	8002be0 <HAL_RCC_OscConfig+0x538>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x544>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d028      	beq.n	8002bdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0d0      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d910      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 020f 	bic.w	r2, r3, #15
 8002c1e:	4965      	ldr	r1, [pc, #404]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b8      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c50:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	494d      	ldr	r1, [pc, #308]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d040      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e07f      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e073      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06b      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4936      	ldr	r1, [pc, #216]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fe4c 	bl	8001980 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe fe48 	bl	8001980 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e053      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d210      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 020f 	bic.w	r2, r3, #15
 8002d2a:	4922      	ldr	r1, [pc, #136]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e032      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	490e      	ldr	r1, [pc, #56]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d82:	f000 f821 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	490a      	ldr	r1, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x1cc>)
 8002d94:	5ccb      	ldrb	r3, [r1, r3]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1d4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fda8 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	080046c0 	.word	0x080046c0
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de0:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x40>
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	f200 80bd 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x34>
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dfa:	e0b7      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dfe:	60bb      	str	r3, [r7, #8]
      break;
 8002e00:	e0b7      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e04:	60bb      	str	r3, [r7, #8]
      break;
 8002e06:	e0b4      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e10:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04d      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	461a      	mov	r2, r3
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	ea02 0800 	and.w	r8, r2, r0
 8002e36:	ea03 0901 	and.w	r9, r3, r1
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	014b      	lsls	r3, r1, #5
 8002e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e4c:	0142      	lsls	r2, r0, #5
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	ebb0 0008 	subs.w	r0, r0, r8
 8002e56:	eb61 0109 	sbc.w	r1, r1, r9
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e68:	0182      	lsls	r2, r0, #6
 8002e6a:	1a12      	subs	r2, r2, r0
 8002e6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	00d9      	lsls	r1, r3, #3
 8002e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e7e:	00d0      	lsls	r0, r2, #3
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	eb12 0208 	adds.w	r2, r2, r8
 8002e88:	eb43 0309 	adc.w	r3, r3, r9
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	0259      	lsls	r1, r3, #9
 8002e96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e9a:	0250      	lsls	r0, r2, #9
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f7fd fdea 	bl	8000a84 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e04a      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	ea02 0400 	and.w	r4, r2, r0
 8002ed2:	ea03 0501 	and.w	r5, r3, r1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	014b      	lsls	r3, r1, #5
 8002ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ee8:	0142      	lsls	r2, r0, #5
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	1b00      	subs	r0, r0, r4
 8002ef0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	018b      	lsls	r3, r1, #6
 8002efe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f02:	0182      	lsls	r2, r0, #6
 8002f04:	1a12      	subs	r2, r2, r0
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	00d9      	lsls	r1, r3, #3
 8002f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f18:	00d0      	lsls	r0, r2, #3
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	1912      	adds	r2, r2, r4
 8002f20:	eb45 0303 	adc.w	r3, r5, r3
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0299      	lsls	r1, r3, #10
 8002f2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f32:	0290      	lsls	r0, r2, #10
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f7fd fd9e 	bl	8000a84 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	60bb      	str	r3, [r7, #8]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f6e:	60bb      	str	r3, [r7, #8]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	68bb      	ldr	r3, [r7, #8]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	080046d0 	.word	0x080046d0

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080046d0 	.word	0x080046d0

08002ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a68      	ldr	r2, [pc, #416]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	4b66      	ldr	r3, [pc, #408]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	4964      	ldr	r1, [pc, #400]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800304e:	4b5d      	ldr	r3, [pc, #372]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	4959      	ldr	r1, [pc, #356]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d017      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800308a:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	494a      	ldr	r1, [pc, #296]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a8:	d101      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 808b 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	; 0x40
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe fc40 	bl	8001980 <HAL_GetTick>
 8003100:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe fc3c 	bl	8001980 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e357      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003116:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d035      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d02e      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d114      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fc04 	bl	8001980 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fc00 	bl	8001980 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e319      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ee      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031aa:	d111      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ba:	400b      	ands	r3, r1
 80031bc:	4901      	ldr	r1, [pc, #4]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
 80031c2:	e00b      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
 80031cc:	0ffffcff 	.word	0x0ffffcff
 80031d0:	4bb1      	ldr	r3, [pc, #708]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4ab0      	ldr	r2, [pc, #704]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031da:	6093      	str	r3, [r2, #8]
 80031dc:	4bae      	ldr	r3, [pc, #696]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	49ab      	ldr	r1, [pc, #684]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031fa:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003200:	4aa5      	ldr	r2, [pc, #660]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003206:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800320a:	4ba3      	ldr	r3, [pc, #652]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800320c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	49a0      	ldr	r1, [pc, #640]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003228:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003236:	4998      	ldr	r1, [pc, #608]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800324a:	4b93      	ldr	r3, [pc, #588]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003258:	498f      	ldr	r1, [pc, #572]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327a:	4987      	ldr	r1, [pc, #540]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	497e      	ldr	r1, [pc, #504]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b0:	4b79      	ldr	r3, [pc, #484]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4976      	ldr	r1, [pc, #472]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d2:	4b71      	ldr	r3, [pc, #452]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f023 020c 	bic.w	r2, r3, #12
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	496d      	ldr	r1, [pc, #436]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032f4:	4b68      	ldr	r3, [pc, #416]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003316:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	495c      	ldr	r1, [pc, #368]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	4954      	ldr	r1, [pc, #336]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800335a:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	494b      	ldr	r1, [pc, #300]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800337c:	4b46      	ldr	r3, [pc, #280]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	4943      	ldr	r1, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ac:	493a      	ldr	r1, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ce:	4932      	ldr	r1, [pc, #200]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d011      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f0:	4929      	ldr	r1, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	4919      	ldr	r1, [pc, #100]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003454:	4910      	ldr	r1, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d006      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80d9 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800347a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fe fa80 	bl	8001980 <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003482:	e00b      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003484:	f7fe fa7c 	bl	8001980 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d904      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e197      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800349c:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ed      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d021      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034bc:	4b64      	ldr	r3, [pc, #400]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d0:	0e1b      	lsrs	r3, r3, #24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	019a      	lsls	r2, r3, #6
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	071b      	lsls	r3, r3, #28
 80034f0:	4957      	ldr	r1, [pc, #348]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003522:	d129      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003524:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	0f1b      	lsrs	r3, r3, #28
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	019a      	lsls	r2, r3, #6
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	071b      	lsls	r3, r3, #28
 8003558:	493d      	ldr	r1, [pc, #244]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003566:	f023 021f 	bic.w	r2, r3, #31
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	3b01      	subs	r3, #1
 8003570:	4937      	ldr	r1, [pc, #220]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	0f1b      	lsrs	r3, r3, #28
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	019a      	lsls	r2, r3, #6
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	071b      	lsls	r3, r3, #28
 80035b8:	4925      	ldr	r1, [pc, #148]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	019a      	lsls	r2, r3, #6
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	071b      	lsls	r3, r3, #28
 80035e8:	4919      	ldr	r1, [pc, #100]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035f0:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fc:	f7fe f9c0 	bl	8001980 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003604:	f7fe f9bc 	bl	8001980 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0d7      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80cd 	bne.w	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003636:	f7fe f9a3 	bl	8001980 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800363e:	f7fe f99f 	bl	8001980 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b64      	cmp	r3, #100	; 0x64
 800364a:	d903      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e0ba      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003650:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003654:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003660:	d0ed      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02e      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d12a      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800368a:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003698:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	0f1b      	lsrs	r3, r3, #28
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	019a      	lsls	r2, r3, #6
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	4944      	ldr	r1, [pc, #272]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036c6:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	493d      	ldr	r1, [pc, #244]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d022      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f4:	d11d      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	0f1b      	lsrs	r3, r3, #28
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	019a      	lsls	r2, r3, #6
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	4929      	ldr	r1, [pc, #164]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d028      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	019a      	lsls	r2, r3, #6
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	431a      	orrs	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	071b      	lsls	r3, r3, #28
 8003772:	4917      	ldr	r1, [pc, #92]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4911      	ldr	r1, [pc, #68]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fe f8f0 	bl	8001980 <HAL_GetTick>
 80037a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037a4:	f7fe f8ec 	bl	8001980 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e007      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c2:	d1ef      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e040      	b.n	8003868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fece 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa94 	bl	8003d40 <UART_SetConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fcea 	bl	8004204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fd71 	bl	8004348 <UART_CheckIdleState>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003882:	2b20      	cmp	r3, #32
 8003884:	d145      	bne.n	8003912 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Transmit_IT+0x22>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03e      	b.n	8003914 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit_IT+0x34>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e037      	b.n	8003914 <HAL_UART_Transmit_IT+0xa4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2221      	movs	r2, #33	; 0x21
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d107      	bne.n	80038f0 <HAL_UART_Transmit_IT+0x80>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_UART_Transmit_IT+0xb0>)
 80038ec:	669a      	str	r2, [r3, #104]	; 0x68
 80038ee:	e002      	b.n	80038f6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_UART_Transmit_IT+0xb4>)
 80038f4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800390c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	080045a3 	.word	0x080045a3
 8003924:	08004531 	.word	0x08004531

08003928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f640 030f 	movw	r3, #2063	; 0x80f
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00e      	beq.n	8003980 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 81b9 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
      }
      return;
 800397e:	e1b3      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80e3 	beq.w	8003b4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <HAL_UART_IRQHandler+0x304>)
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d8 	beq.w	8003b4e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_UART_IRQHandler+0xa2>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_UART_IRQHandler+0xce>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_UART_IRQHandler+0xfa>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	f043 0208 	orr.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <HAL_UART_IRQHandler+0x15e>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00c      	beq.n	8003a86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 812d 	beq.w	8003cec <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003abc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d004      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d031      	beq.n	8003b3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fce5 	bl	80044a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d123      	bne.n	8003b32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_UART_IRQHandler+0x308>)
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f996 	bl	8001e40 <HAL_DMA_Abort_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d017      	beq.n	8003b4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e00f      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8f2 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00b      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8ee 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e007      	b.n	8003b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8ea 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b48:	e0d0      	b.n	8003cec <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	bf00      	nop
    return;
 8003b4c:	e0ce      	b.n	8003cec <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	f040 80a7 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a1 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 809b 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d156      	bne.n	8003c34 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80ac 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b9e:	893a      	ldrh	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	f080 80a5 	bcs.w	8003cf0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb8:	d02a      	beq.n	8003c10 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0210 	bic.w	r2, r2, #16
 8003c04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe f8a8 	bl	8001d60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f87f 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c2a:	e061      	b.n	8003cf0 <HAL_UART_IRQHandler+0x3c8>
 8003c2c:	04000120 	.word	0x04000120
 8003c30:	08004505 	.word	0x08004505
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d050      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d04d      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0210 	bic.w	r2, r2, #16
 8003c98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f842 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca4:	e026      	b.n	8003cf4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
    }
    return;
 8003cca:	e015      	b.n	8003cf8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fc9c 	bl	800461e <UART_EndTransmit_IT>
    return;
 8003ce6:	e008      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ce8:	bf00      	nop
 8003cea:	e006      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003cec:	bf00      	nop
 8003cee:	e004      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003cf8:	bf00      	nop
  }

}
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4ba7      	ldr	r3, [pc, #668]	; (8004008 <UART_SetConfig+0x2c8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	6979      	ldr	r1, [r7, #20]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a95      	ldr	r2, [pc, #596]	; (800400c <UART_SetConfig+0x2cc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d120      	bne.n	8003dfe <UART_SetConfig+0xbe>
 8003dbc:	4b94      	ldr	r3, [pc, #592]	; (8004010 <UART_SetConfig+0x2d0>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d816      	bhi.n	8003df8 <UART_SetConfig+0xb8>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <UART_SetConfig+0x90>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003ded 	.word	0x08003ded
 8003dd8:	08003de7 	.word	0x08003de7
 8003ddc:	08003df3 	.word	0x08003df3
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e14f      	b.n	8004086 <UART_SetConfig+0x346>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e14c      	b.n	8004086 <UART_SetConfig+0x346>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e149      	b.n	8004086 <UART_SetConfig+0x346>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e146      	b.n	8004086 <UART_SetConfig+0x346>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e143      	b.n	8004086 <UART_SetConfig+0x346>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a84      	ldr	r2, [pc, #528]	; (8004014 <UART_SetConfig+0x2d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d132      	bne.n	8003e6e <UART_SetConfig+0x12e>
 8003e08:	4b81      	ldr	r3, [pc, #516]	; (8004010 <UART_SetConfig+0x2d0>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d828      	bhi.n	8003e68 <UART_SetConfig+0x128>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0xdc>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e69 	.word	0x08003e69
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e5d 	.word	0x08003e5d
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e57 	.word	0x08003e57
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	08003e63 	.word	0x08003e63
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e117      	b.n	8004086 <UART_SetConfig+0x346>
 8003e56:	2302      	movs	r3, #2
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e114      	b.n	8004086 <UART_SetConfig+0x346>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e111      	b.n	8004086 <UART_SetConfig+0x346>
 8003e62:	2308      	movs	r3, #8
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e10e      	b.n	8004086 <UART_SetConfig+0x346>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e10b      	b.n	8004086 <UART_SetConfig+0x346>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a69      	ldr	r2, [pc, #420]	; (8004018 <UART_SetConfig+0x2d8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d120      	bne.n	8003eba <UART_SetConfig+0x17a>
 8003e78:	4b65      	ldr	r3, [pc, #404]	; (8004010 <UART_SetConfig+0x2d0>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d013      	beq.n	8003eae <UART_SetConfig+0x16e>
 8003e86:	2b30      	cmp	r3, #48	; 0x30
 8003e88:	d814      	bhi.n	8003eb4 <UART_SetConfig+0x174>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d009      	beq.n	8003ea2 <UART_SetConfig+0x162>
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d810      	bhi.n	8003eb4 <UART_SetConfig+0x174>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <UART_SetConfig+0x15c>
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d006      	beq.n	8003ea8 <UART_SetConfig+0x168>
 8003e9a:	e00b      	b.n	8003eb4 <UART_SetConfig+0x174>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e0f1      	b.n	8004086 <UART_SetConfig+0x346>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e0ee      	b.n	8004086 <UART_SetConfig+0x346>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0eb      	b.n	8004086 <UART_SetConfig+0x346>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0e8      	b.n	8004086 <UART_SetConfig+0x346>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0e5      	b.n	8004086 <UART_SetConfig+0x346>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a57      	ldr	r2, [pc, #348]	; (800401c <UART_SetConfig+0x2dc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d120      	bne.n	8003f06 <UART_SetConfig+0x1c6>
 8003ec4:	4b52      	ldr	r3, [pc, #328]	; (8004010 <UART_SetConfig+0x2d0>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ece:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed0:	d013      	beq.n	8003efa <UART_SetConfig+0x1ba>
 8003ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed4:	d814      	bhi.n	8003f00 <UART_SetConfig+0x1c0>
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d009      	beq.n	8003eee <UART_SetConfig+0x1ae>
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d810      	bhi.n	8003f00 <UART_SetConfig+0x1c0>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <UART_SetConfig+0x1a8>
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d006      	beq.n	8003ef4 <UART_SetConfig+0x1b4>
 8003ee6:	e00b      	b.n	8003f00 <UART_SetConfig+0x1c0>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e0cb      	b.n	8004086 <UART_SetConfig+0x346>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e0c8      	b.n	8004086 <UART_SetConfig+0x346>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0c5      	b.n	8004086 <UART_SetConfig+0x346>
 8003efa:	2308      	movs	r3, #8
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0c2      	b.n	8004086 <UART_SetConfig+0x346>
 8003f00:	2310      	movs	r3, #16
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0bf      	b.n	8004086 <UART_SetConfig+0x346>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a45      	ldr	r2, [pc, #276]	; (8004020 <UART_SetConfig+0x2e0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d125      	bne.n	8003f5c <UART_SetConfig+0x21c>
 8003f10:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <UART_SetConfig+0x2d0>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1e:	d017      	beq.n	8003f50 <UART_SetConfig+0x210>
 8003f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f24:	d817      	bhi.n	8003f56 <UART_SetConfig+0x216>
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	d00b      	beq.n	8003f44 <UART_SetConfig+0x204>
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f30:	d811      	bhi.n	8003f56 <UART_SetConfig+0x216>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <UART_SetConfig+0x1fe>
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d006      	beq.n	8003f4a <UART_SetConfig+0x20a>
 8003f3c:	e00b      	b.n	8003f56 <UART_SetConfig+0x216>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e0a0      	b.n	8004086 <UART_SetConfig+0x346>
 8003f44:	2302      	movs	r3, #2
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e09d      	b.n	8004086 <UART_SetConfig+0x346>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e09a      	b.n	8004086 <UART_SetConfig+0x346>
 8003f50:	2308      	movs	r3, #8
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e097      	b.n	8004086 <UART_SetConfig+0x346>
 8003f56:	2310      	movs	r3, #16
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e094      	b.n	8004086 <UART_SetConfig+0x346>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a30      	ldr	r2, [pc, #192]	; (8004024 <UART_SetConfig+0x2e4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d125      	bne.n	8003fb2 <UART_SetConfig+0x272>
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <UART_SetConfig+0x2d0>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f74:	d017      	beq.n	8003fa6 <UART_SetConfig+0x266>
 8003f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f7a:	d817      	bhi.n	8003fac <UART_SetConfig+0x26c>
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f80:	d00b      	beq.n	8003f9a <UART_SetConfig+0x25a>
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f86:	d811      	bhi.n	8003fac <UART_SetConfig+0x26c>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <UART_SetConfig+0x254>
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d006      	beq.n	8003fa0 <UART_SetConfig+0x260>
 8003f92:	e00b      	b.n	8003fac <UART_SetConfig+0x26c>
 8003f94:	2301      	movs	r3, #1
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e075      	b.n	8004086 <UART_SetConfig+0x346>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e072      	b.n	8004086 <UART_SetConfig+0x346>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e06f      	b.n	8004086 <UART_SetConfig+0x346>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e06c      	b.n	8004086 <UART_SetConfig+0x346>
 8003fac:	2310      	movs	r3, #16
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e069      	b.n	8004086 <UART_SetConfig+0x346>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <UART_SetConfig+0x2e8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d137      	bne.n	800402c <UART_SetConfig+0x2ec>
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <UART_SetConfig+0x2d0>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fca:	d017      	beq.n	8003ffc <UART_SetConfig+0x2bc>
 8003fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd0:	d817      	bhi.n	8004002 <UART_SetConfig+0x2c2>
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd6:	d00b      	beq.n	8003ff0 <UART_SetConfig+0x2b0>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d811      	bhi.n	8004002 <UART_SetConfig+0x2c2>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <UART_SetConfig+0x2aa>
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d006      	beq.n	8003ff6 <UART_SetConfig+0x2b6>
 8003fe8:	e00b      	b.n	8004002 <UART_SetConfig+0x2c2>
 8003fea:	2300      	movs	r3, #0
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e04a      	b.n	8004086 <UART_SetConfig+0x346>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e047      	b.n	8004086 <UART_SetConfig+0x346>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e044      	b.n	8004086 <UART_SetConfig+0x346>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e041      	b.n	8004086 <UART_SetConfig+0x346>
 8004002:	2310      	movs	r3, #16
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e03e      	b.n	8004086 <UART_SetConfig+0x346>
 8004008:	efff69f3 	.word	0xefff69f3
 800400c:	40011000 	.word	0x40011000
 8004010:	40023800 	.word	0x40023800
 8004014:	40004400 	.word	0x40004400
 8004018:	40004800 	.word	0x40004800
 800401c:	40004c00 	.word	0x40004c00
 8004020:	40005000 	.word	0x40005000
 8004024:	40011400 	.word	0x40011400
 8004028:	40007800 	.word	0x40007800
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a71      	ldr	r2, [pc, #452]	; (80041f8 <UART_SetConfig+0x4b8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d125      	bne.n	8004082 <UART_SetConfig+0x342>
 8004036:	4b71      	ldr	r3, [pc, #452]	; (80041fc <UART_SetConfig+0x4bc>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004040:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004044:	d017      	beq.n	8004076 <UART_SetConfig+0x336>
 8004046:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800404a:	d817      	bhi.n	800407c <UART_SetConfig+0x33c>
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d00b      	beq.n	800406a <UART_SetConfig+0x32a>
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004056:	d811      	bhi.n	800407c <UART_SetConfig+0x33c>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x324>
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x330>
 8004062:	e00b      	b.n	800407c <UART_SetConfig+0x33c>
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x346>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e00a      	b.n	8004086 <UART_SetConfig+0x346>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e007      	b.n	8004086 <UART_SetConfig+0x346>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e004      	b.n	8004086 <UART_SetConfig+0x346>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e001      	b.n	8004086 <UART_SetConfig+0x346>
 8004082:	2310      	movs	r3, #16
 8004084:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408e:	d15b      	bne.n	8004148 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d827      	bhi.n	80040e6 <UART_SetConfig+0x3a6>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x35c>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe ff70 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80040c4:	61b8      	str	r0, [r7, #24]
        break;
 80040c6:	e013      	b.n	80040f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7fe ff80 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 80040cc:	61b8      	str	r0, [r7, #24]
        break;
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <UART_SetConfig+0x4c0>)
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e00c      	b.n	80040f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7fe fe77 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 80040da:	61b8      	str	r0, [r7, #24]
        break;
 80040dc:	e008      	b.n	80040f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e004      	b.n	80040f0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77bb      	strb	r3, [r7, #30]
        break;
 80040ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d074      	beq.n	80041e0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d916      	bls.n	8004142 <UART_SetConfig+0x402>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d212      	bcs.n	8004142 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b29a      	uxth	r2, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	4313      	orrs	r3, r2
 8004136:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	89fa      	ldrh	r2, [r7, #14]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e04e      	b.n	80041e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	77bb      	strb	r3, [r7, #30]
 8004146:	e04b      	b.n	80041e0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004148:	7ffb      	ldrb	r3, [r7, #31]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x45e>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x414>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7fe ff14 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 800417c:	61b8      	str	r0, [r7, #24]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fe ff24 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <UART_SetConfig+0x4c0>)
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe fe1b 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8004192:	61b8      	str	r0, [r7, #24]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77bb      	strb	r3, [r7, #30]
        break;
 80041a6:	bf00      	nop
    }

    if (pclk != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085a      	lsrs	r2, r3, #1
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d908      	bls.n	80041dc <UART_SetConfig+0x49c>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d204      	bcs.n	80041dc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e001      	b.n	80041e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40007c00 	.word	0x40007c00
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400

08004204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01a      	beq.n	800431a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d10a      	bne.n	800431a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004358:	f7fd fb12 	bl	8001980 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d10e      	bne.n	800438a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f817 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00d      	b.n	80043a6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	e05e      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d05a      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fd fada 	bl	8001980 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <UART_WaitOnFlagUntilTimeout+0x30>
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11b      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e043      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02c      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004432:	d124      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800444c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e00f      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	429a      	cmp	r2, r3
 800449a:	d091      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0210 	bic.w	r2, r2, #16
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fbf6 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453c:	2b21      	cmp	r3, #33	; 0x21
 800453e:	d12a      	bne.n	8004596 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d110      	bne.n	800456e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800455a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800456c:	e013      	b.n	8004596 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d12f      	bne.n	8004612 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d110      	bne.n	80045e0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045cc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80045de:	e018      	b.n	8004612 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004634:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fb5c 	bl	8003d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4d0d      	ldr	r5, [pc, #52]	; (8004688 <__libc_init_array+0x38>)
 8004654:	4c0d      	ldr	r4, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	2600      	movs	r6, #0
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	4d0b      	ldr	r5, [pc, #44]	; (8004690 <__libc_init_array+0x40>)
 8004662:	4c0c      	ldr	r4, [pc, #48]	; (8004694 <__libc_init_array+0x44>)
 8004664:	f000 f820 	bl	80046a8 <_init>
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	2600      	movs	r6, #0
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f855 3b04 	ldr.w	r3, [r5], #4
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	080046e8 	.word	0x080046e8
 800468c:	080046e8 	.word	0x080046e8
 8004690:	080046e8 	.word	0x080046e8
 8004694:	080046f0 	.word	0x080046f0

08004698 <memset>:
 8004698:	4402      	add	r2, r0
 800469a:	4603      	mov	r3, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	d100      	bne.n	80046a2 <memset+0xa>
 80046a0:	4770      	bx	lr
 80046a2:	f803 1b01 	strb.w	r1, [r3], #1
 80046a6:	e7f9      	b.n	800469c <memset+0x4>

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
